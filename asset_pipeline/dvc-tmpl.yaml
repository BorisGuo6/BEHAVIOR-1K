stages:
  sanitycheck:
    # Run a check to ensure .max files match expected format.
    foreach: ${combined_unfiltered}
    do:
      cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/new_sanity_check.py batch=true'
      deps:
      - cad/${item}/processed.max
      # - cad/${item}/textures
      - b1k_pipeline/max/new_sanity_check.py
      outs:
      - cad/${item}/artifacts/sanitycheck.json

  sanitycheck_success:
    cmd: 'python b1k_pipeline/check_success_aggregate.py artifacts/sanitycheck.json artifacts/pipeline/sanitycheck.success'
    deps:
    - cad/#{combined}/artifacts/sanitycheck.json
    - b1k_pipeline/check_success_aggregate.py
    - params.yaml
    outs:
    - artifacts/pipeline/sanitycheck.success

  object_list:
    # List the objects found in the entry.
    foreach: ${combined_unfiltered}
    do:
      cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/object_list.py'
      deps:
      - b1k_pipeline/max/object_list.py
      - cad/${item}/processed.max
      outs:
      - cad/${item}/artifacts/object_list.json

  object_list_success:
    cmd: 'python b1k_pipeline/check_success_aggregate.py artifacts/object_list.json artifacts/pipeline/object_list.success'
    deps:
    - cad/#{combined}/artifacts/object_list.json
    - b1k_pipeline/check_success_aggregate.py
    - params.yaml
    outs:
    - artifacts/pipeline/object_list.success

  object_inventory:
    # List all objects found in all entries, with their sources. Cross-reference bad objects w/ providers. Check provider uniqueness.
    cmd: 'python b1k_pipeline/object_inventory.py'
    deps:
    - cad/#{combined}/artifacts/object_list.json
    - artifacts/pipeline/object_list.success
    - b1k_pipeline/object_inventory.py
    - params.yaml
    outs:
    - artifacts/pipeline/object_inventory.json
    - artifacts/pipeline/object_inventory.success

  # generate_object_images:
  #   # Generate photos of each object found in each entry.
  #   foreach: ${combined}
  #   do:
  #     cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/generate_object_images.py'
  #     deps:
  #     - b1k_pipeline/max/generate_object_images.py
  #     - cad/${item}/processed.max
  #     outs:
  #     - cad/${item}/artifacts/object_images
  #     - cad/${item}/artifacts/generate_object_images.success

  export_meshes:
    # Export meshes from 3dsmax as obj/mtl files with baked textures.
    foreach: ${combined}
    do:
      cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/export_meshes.py'
      deps:
      - b1k_pipeline/max/export_meshes.py
      - cad/${item}/artifacts/object_list.json
      - artifacts/pipeline/sanitycheck.success
      - cad/${item}/processed.max
      - params.yaml
      outs:
      - cad/${item}/artifacts/meshes
      - cad/${item}/artifacts/export_meshes.json

  export_meshes_success:
    cmd: 'python b1k_pipeline/check_success_aggregate.py artifacts/export_meshes.json artifacts/pipeline/export_meshes.success'
    deps:
    - cad/#{combined}/artifacts/export_meshes.json
    - b1k_pipeline/check_success_aggregate.py
    outs:
    - artifacts/pipeline/export_meshes.success

  # export_objs:
  #   # Process exported meshes into iGibson objects.
  #   foreach: ${combined}
  #   do:
  #     cmd: 'python -m b1k_pipeline.export_objs ${item}'
  #     deps:
  #     - cad/${item}/artifacts/export_meshes.success
  #     - cad/${item}/artifacts/meshes
  #     - cad/${item}/artifacts/object_list.success
  #     - cad/${item}/artifacts/object_list.json
  #     - b1k_pipeline/export_objs.py
  #     - b1k_pipeline/mesh_tree.py
  #     outs:
  #     - cad/${item}/artifacts/objects
  #     - cad/${item}/artifacts/export_objs.json

  # export_objs_success:
  #   cmd: 'python b1k_pipeline/check_success_aggregate.py artifacts/export_objs.json artifacts/pipeline/export_objs.success'
  #   deps:
  #   - cad/#{combined}/artifacts/export_objs.json
  #   - b1k_pipeline/check_success_aggregate.py
  #   outs:
  #   - artifacts/pipeline/export_objs.success

  # validate_objs:
  #   # Validate exported objects.
  #   foreach: ${combined}
  #   do:
  #     cmd: 'python b1k_pipeline/validate_objs.py ${item}'
  #     deps:
  #     - cad/${item}/artifacts/objects
  #     - cad/${item}/artifacts/export_objs.success
  #     - b1k_pipeline/validate_objs.py
  #     outs:
  #     - cad/${item}/artifacts/validate_objs.json
  #     - cad/${item}/artifacts/validate_objs.success

  # aggregate_objs:
  #   # Aggregate objects from different entries into a single location.
  #   cmd: 'python b1k_pipeline/aggregate_objs.py'
  #   deps:
  #   - b1k_pipeline/aggregate_objs.py
  #   - cad/#{combined}/artifacts/export_objs.success
  #   - cad/#{combined}/artifacts/objects
  #   - artifacts/pipeline/object_inventory.json
  #   - artifacts/pipeline/object_inventory.success
  #   outs:
  #   - artifacts/aggregate/objects
  #   - artifacts/pipeline/aggregate_objs.success
  #   - artifacts/pipeline/aggregate_objs.json

  export_objs_global:
    # Process exported meshes into iGibson objects.
    cmd: 'python -m b1k_pipeline.export_objs_global'
    deps:
    - cad/#{combined}/artifacts/meshes
    - cad/#{combined}/artifacts/object_list.json
    - artifacts/pipeline/object_list.success
    - artifacts/pipeline/object_inventory.success
    - artifacts/pipeline/sanitycheck.success
    - artifacts/pipeline/export_meshes.success
    - b1k_pipeline/export_objs_global.py
    - b1k_pipeline/mesh_tree.py
    outs:
    - artifacts/aggregate/objects
    - artifacts/pipeline/export_objs.json

  export_objs_global_success:
    cmd: 'python b1k_pipeline/check_success.py artifacts/pipeline/export_objs.json artifacts/pipeline/export_objs.success'
    deps:
    - artifacts/pipeline/export_objs.json
    - b1k_pipeline/check_success.py
    outs:
    - artifacts/pipeline/export_objs.success

  # usdify_objs:
  #   # Convert the objects to USD.
  #   cmd: >
  #     docker run -e "ACCEPT_EULA=Y" -e DISPLAY --security-opt=label=disable --gpus=all -v ${root_path}:/ig_pipeline -w /ig_pipeline --rm -it omnigibson:latest python b1k_pipeline/usd_conversion/usdify_objs.py
  #   deps:
  #   - artifacts/aggregate/objects
  #   - artifacts/pipeline/aggregate_objs.success
  #   - b1k_pipeline/usd_conversion/usdify_objs.py
  #   outs:
  #   - artifacts/pipeline/usdify_objs.success

  # generate_scene_images:
  #   # Generate photos of each scene.
  #   foreach: ${scenes}
  #   do:
  #     cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/generate_images.py'
  #     deps:
  #     - b1k_pipeline/max/generate_images.py
  #     - cad/${item}/processed.max
  #     outs:
  #     - cad/${item}/artifacts/top.png
  #     - cad/${item}/artifacts/generate_images.success

  # generate_camera_images:
  #   # Generate photos of each camera in each scene.
  #   foreach: ${final_scenes}
  #   do:
  #     cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/generate_camera_images.py'
  #     deps:
  #     - b1k_pipeline/max/generate_camera_images.py
  #     - cad/${item}/processed.max
  #     outs:
  #     - cad/${item}/artifacts/camera_images
  #     - cad/${item}/artifacts/generate_camera_images.success

  # room_object_list:
  #   # Generate a list of all objects found in each room in each scene.
  #   foreach: ${scenes_unfiltered}
  #   do:
  #     cmd: 'python b1k_pipeline/batch_3dsmax.py cad/${item}/processed.max b1k_pipeline/max/room_object_list.py'
  #     deps:
  #     - b1k_pipeline/max/room_object_list.py
  #     - cad/${item}/processed.max
  #     # - cad/${item}/artifacts/sanitycheck.json
  #     outs:
  #     - cad/${item}/artifacts/room_object_list.json
  #     - cad/${item}/artifacts/room_object_list.success
      
  # combined_room_object_list:
  #   # Generate a combined list of all objects found in each room across all scenes, with synset mappings.
  #   cmd: 'python b1k_pipeline/combined_room_object_list.py'
  #   deps:
  #   - cad/#{scenes_unfiltered}/artifacts/room_object_list.json
  #   - cad/#{scenes_unfiltered}/artifacts/room_object_list.success
  #   - b1k_pipeline/combined_room_object_list.py
  #   - params.yaml
  #   outs:
  #   - artifacts/pipeline/combined_room_object_list.json
  #   - artifacts/pipeline/combined_room_object_list.success

  export_scene:
    # Generate scene URDF file from meshes.
    foreach: ${scenes}
    do:
      cmd: 'python -m b1k_pipeline.export_scene ${item}'
      deps:
      - artifacts/pipeline/export_meshes.success
      - cad/${item}/artifacts/meshes
      - artifacts/aggregate/objects
      - b1k_pipeline/export_scene.py
      - b1k_pipeline/export_objs_global.py
      - b1k_pipeline/mesh_tree.py
      outs:
      - cad/${item}/artifacts/scene
      - cad/${item}/artifacts/export_scene.success

  # export_scene_success:
  #   cmd: 'python b1k_pipeline/check_success_aggregate.py artifacts/export_scene.json artifacts/pipeline/export_scene.success'
  #   deps:
  #   - cad/#{scenes}/artifacts/export_scene.json
  #   - b1k_pipeline/check_success_aggregate.py
  #   outs:
  #   - artifacts/pipeline/export_scene.success

  validate_scene:
    # Validate exported scene, e.g. physics stability.
    foreach: ${scenes}
    do:
      cmd: 'python -m b1k_pipeline.validate_scene ${item}'
      deps:
      - cad/${item}/artifacts/scene
      - artifacts/aggregate/export_scene.success
      - b1k_pipeline/validate_scene.py
      outs:
      - cad/${item}/artifacts/validate_scene.json

  validate_scene_success:
    cmd: 'python b1k_pipeline/check_success_aggregate.py artifacts/validate_scene.json artifacts/pipeline/validate_scene.success'
    deps:
    - cad/#{scenes}/artifacts/validate_scene.json
    - b1k_pipeline/check_success_aggregate.py
    outs:
    - artifacts/pipeline/validate_scene.success

  aggregate_scenes:
    # Aggregate scenes from different entries into a single location.
    cmd: 'python b1k_pipeline/aggregate_scenes.py'
    deps:
    - cad/#{scenes}/artifacts/scene
    - cad/#{scenes}/artifacts/export_scene.success
    # - cad/#{scenes}/artifacts/validate_scene.success
    - b1k_pipeline/aggregate_scenes.py
    - params.yaml
    outs:
    - artifacts/aggregate/scenes
    - artifacts/pipeline/aggregate_scenes.success

  aggregate_metadata:
    # Add metadata and compile everything in the right spot.
    cmd: 'python b1k_pipeline/aggregate_metadata.py'
    deps:
    - b1k_pipeline/aggregate_metadata.py
    - artifacts/aggregate/objects
    - artifacts/aggregate/scenes
    - metadata/category_mapping.csv
    outs:
    - artifacts/aggregate/metadata
    - artifacts/pipeline/aggregate_metadata.json

  aggregate_metadata_success:
    cmd: 'python b1k_pipeline/check_success.py artifacts/pipeline/aggregate_metadata.json artifacts/pipeline/aggregate_metadata.success'
    deps:
    - artifacts/pipeline/aggregate_metadata.json
    - b1k_pipeline/check_success.py
    outs:
    - artifacts/pipeline/aggregate_metadata.success

  # usdify_scenes:
  #   # Convert the scenes to USD.
  #   cmd: >
  #     docker run -e "ACCEPT_EULA=Y" -e DISPLAY --security-opt=label=disable --gpus=all -v ${root_path}:/ig_pipeline -w /ig_pipeline --rm -it omnigibson:latest python b1k_pipeline/usd_conversion/usdify_scenes.py
  #   deps:
  #   - artifacts/aggregate/scenes
  #   - artifacts/pipeline/aggregate_scenes.success
  #   - b1k_pipeline/usd_conversion/usdify_scenes.py
  #   outs:
  #   - artifacts/pipeline/usdify_scenes.success

  pack_dataset:
    # Zip the dataset.
    cmd: 'python b1k_pipeline/pack_dataset.py'
    deps:
    - artifacts/pipeline/aggregate_metadata.success
    - artifacts/pipeline/aggregate_scenes.success
    - artifacts/pipeline/export_objs.success
    - artifacts/aggregate/metadata
    - artifacts/aggregate/objects
    - artifacts/aggregate/scenes
    - b1k_pipeline/pack_dataset.py
    # - artifacts/pipeline/usdify_objs.success
    # - artifacts/pipeline/usdify_scenes.success
    outs:
    - artifacts/og_dataset.zip

  # upload_dataset:
  #   # Upload the dataset to Cloud Storage.
  #   cmd: 'python b1k_pipeline/upload_dataset.py'
  #   deps:
  #   - artifacts/og_dataset.zip
  #   - b1k_pipeline/upload_dataset.py
  #   outs:
  #   - artifacts/pipeline/upload_dataset.success